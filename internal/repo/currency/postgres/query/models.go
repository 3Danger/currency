// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package query

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/shopspring/decimal"
)

type CryptoCode string

const (
	CryptoCodeUSDT CryptoCode = "USDT"
	CryptoCodeUSDC CryptoCode = "USDC"
	CryptoCodeETH  CryptoCode = "ETH"
)

func (e *CryptoCode) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CryptoCode(s)
	case string:
		*e = CryptoCode(s)
	default:
		return fmt.Errorf("unsupported scan type for CryptoCode: %T", src)
	}
	return nil
}

type NullCryptoCode struct {
	CryptoCode CryptoCode
	Valid      bool // Valid is true if CryptoCode is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCryptoCode) Scan(value interface{}) error {
	if value == nil {
		ns.CryptoCode, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CryptoCode.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCryptoCode) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CryptoCode), nil
}

type FiatCode string

const (
	FiatCodeEUR FiatCode = "EUR"
	FiatCodeUSD FiatCode = "USD"
	FiatCodeCNY FiatCode = "CNY"
)

func (e *FiatCode) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FiatCode(s)
	case string:
		*e = FiatCode(s)
	default:
		return fmt.Errorf("unsupported scan type for FiatCode: %T", src)
	}
	return nil
}

type NullFiatCode struct {
	FiatCode FiatCode
	Valid    bool // Valid is true if FiatCode is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFiatCode) Scan(value interface{}) error {
	if value == nil {
		ns.FiatCode, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FiatCode.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFiatCode) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FiatCode), nil
}

type CurrencyCryptoPair struct {
	CodeCrypto CryptoCode
	CodeFiat   FiatCode
	UpdatedAt  time.Time
	Rate       decimal.Decimal
}

type CurrencyFiat struct {
	Code      FiatCode
	UpdatedAt time.Time
	RateToUsd decimal.Decimal
}
